-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A neat Discord bot written in Haskell.
@package owenbot
@version 0.1.0.0

module CSV
configDir :: IO FilePath

-- | Reads CSV as 2-D T.Text list. If doesn't exist, creates new file with
--   empty contents and returns []
readCSV :: FilePath -> IO [[Text]]
readSingleColCSV :: FilePath -> IO [Text]

-- | Write CSV from 2-D T.Text list
writeCSV :: FilePath -> [[Text]] -> IO ()
writeSingleColCSV :: FilePath -> [Text] -> IO ()

-- | Appends the given tabular <tt>Text</tt> data to the CSV present at the
--   given path. If no such CSV exists, a new one is created.
addToCSV :: FilePath -> [[Text]] -> IO ()
writeHashMapToCSV :: FilePath -> HashMap Text Text -> IO ()

module Config

module DB

-- | Directory to store KeyValues in: ~<i>.local</i>share<i>owen</i>db on
--   UNIX, %APPDATA% on Windows. Controlled by XDG_DATA environment
--   variable.
dbDir :: IO FilePath

-- | Reads a KeyValue DB from a file
readKV :: FilePath -> IO KeyValue

-- | Returns `Just T.Text` if <tt>k</tt> is in the KeyValue, <a>Nothing</a>
--   otherwise.
lookupKV :: Text -> KeyValue -> Maybe Text

-- | O(n) - Adds (k,v) to the start of the KeyValue
prependKV :: Text -> Text -> KeyValue -> KeyValue

-- | Writes a KeyValue to a file TODO: Handle errors
writeKV :: FilePath -> KeyValue -> IO ()

-- | Gets a value from a given db; if it doesn't exist, return ""
fetch :: FilePath -> Text -> IO Text

-- | Prepends a key value pair to a db file. Handles it all! TODO: This
--   should really signal failure to the caller
store :: FilePath -> Text -> Text -> IO ()

module Owoifier

-- | This takes a text and returns an owofied text e.g. "North
--   `<tt>`West`</tt>`" -&gt; "Nyowth `<tt>`West`</tt>` owo"
owoify :: Text -> Text

-- | Maps the function that actually owofies the text over each character
--   of the string
weakOwoify :: Text -> Text

module Status

-- | Convert intuitive strings into the respective DataTypes Passes values
--   onto updateStatus' Although we revert to defaults if enums don't
--   match, the caller of this function should always check first on their
--   own and provide approriate error messages.
updateStatus :: Text -> Text -> Text -> DiscordHandler ()
editStatusFile :: Text -> Text -> Text -> IO ()

-- | Sets the status from file on bot launch Should be called only once.
setStatusFromFile :: DiscordHandler ()

module TemplateRE
oneDot :: Text
twoDot :: Text
trailingWS :: Text
thmRE :: Text
defRE :: Text
lemRE :: Text
textbookRE :: Text
accoladedArgRE :: Text
quotedArgRE :: Text
spaceRE :: Text


module Utils

-- | <a>emojiToUsableText</a> converts a given emoji to a text which can be
--   used to display it in Discord.
emojiToUsableText :: Emoji -> Text

-- | <a>sendMessageChan</a> attempts to send the given <tt>Text</tt> in the
--   channel with the given <tt>channelID</tt>. Surpesses any error
--   message(s), returning <tt>()</tt>.
sendMessageChan :: ChannelId -> Text -> DiscordHandler ()

-- | <a>sendReply</a> attempts to send a reply to the given <a>Message</a>.
--   Suppresses any error message(s), returning <tt>()</tt>.
sendReply :: Message -> Bool -> Text -> DiscordHandler ()

-- | <a>sendMessageChanEmbed</a> attempts to send the given embed with the
--   given <tt>Text</tt> in the channel with the given <tt>channelID</tt>.
--   Surpesses any error message(s), returning <tt>()</tt>.
sendMessageChanEmbed :: ChannelId -> Text -> CreateEmbed -> DiscordHandler ()

-- | <a>sendMessageChanPingsDisabled</a> acts in the same way as
--   <a>sendMessageChan</a>, but disables all pings (<tt>everyone,
--   </tt>user, @role) pings from the message.
sendMessageChanPingsDisabled :: ChannelId -> Text -> DiscordHandler ()

-- | <a>sendMessageDM</a> attempts to send the given <tt>Text</tt> as a
--   direct message to the user with the given <a>UserId</a>. Surpresses
--   any error message(s), returning <tt>()</tt>.
sendMessageDM :: UserId -> Text -> DiscordHandler ()

-- | <a>sendFileChan</a> attempts to send the file at the provided
--   <a>FilePath</a> in the channel with the provided <a>ChannelId</a>. The
--   file attachment is annotated by the given <tt>Text</tt>. Surpresses
--   any error message(s), returning <tt>()</tt>.
sendFileChan :: ChannelId -> Text -> FilePath -> DiscordHandler ()

-- | <a>addReaction</a> attempts to add a reaction to the given message ID.
--   Supresses any error message(s), returning <tt>()</tt>.
addReaction :: ChannelId -> MessageId -> Text -> DiscordHandler ()

-- | <a>messageFromReaction</a> attempts to get the Message instance from a
--   reaction.
messageFromReaction :: ReactionInfo -> DiscordHandler (Either RestCallErrorCode Message)

-- | <a>pingUser</a> constructs a minimal <tt>Text</tt> pinging the given
--   user.
pingUser :: User -> Text

-- | <a>pingRole</a> constructs a minimal <tt>Text</tt> pinging the given
--   role id.
pingRole :: RoleId -> Text

-- | <a>pingAuthorOf</a> constructs a minimal <tt>Text</tt> pinging the
--   author of a given message.
pingAuthorOf :: Message -> Text

-- | <a>pingWithUsername</a> constructs a minimal <tt>Text</tt> pinging the
--   the user with the given username from the given guild. On failure,
--   returns an empty Text. On multiple such users, returns an empty Text.
pingWithUsername :: Text -> GuildId -> DiscordHandler Text

-- | <a>stripAllPings</a> removes all pings from a given <tt>Text</tt>
--   message.
stripAllPings :: Text -> Text

-- | <a>newCommand</a> should be used in the creation of a new Owen
--   command. Given a <a>Text</a> command regex (lacking the <tt>:</tt>
--   prefix and the trailing whitespace), along with a function that can
--   handle the regex captures, the command can be used to create `Message
--   -&gt; DiscordHandler ()` message receivers.
newCommand :: Message -> Text -> ([Text] -> DiscordHandler ()) -> DiscordHandler ()

-- | <a>newDevCommand</a> should be used in the creation of a new Owen dev
--   command. Acts in the same way as <a>newCommand</a>, with the
--   distinction that it constructs handlers that require the message
--   author to be a developer. If they are not, the message author is
--   messaged directly and reprimanded so harshly that they will never
--   attempt to use a dev command ever again.
newDevCommand :: Message -> Text -> ([Text] -> DiscordHandler ()) -> DiscordHandler ()
newModCommand :: Message -> Text -> ([Text] -> DiscordHandler ()) -> DiscordHandler ()

-- | <a>linkChannel</a> constructs a minimal <tt>Text</tt> linking the
--   channel with the provided ID.
linkChannel :: ChannelId -> Text

-- | <a>getMessageLink</a> attempts to construct the Discord URL of the
--   given message, as a <tt>Text</tt>.
getMessageLink :: Message -> DiscordHandler (Either RestCallErrorCode Text)

-- | <a>hasRoleByName</a> checks whether the provided message was sent by a
--   user that has a role matching the provided <tt>Text</tt> exactly.
hasRoleByName :: Message -> Text -> DiscordHandler Bool

-- | <a>hasRoleByID</a> checks whether the provided message was sent by a
--   user that has a role matching the provided <a>RoleId</a>.
hasRoleByID :: Message -> RoleId -> DiscordHandler Bool

-- | <a>isMod</a> checks whether the provided message was sent by a user
--   with the <tt>Moderator</tt> role.
isMod :: Message -> DiscordHandler Bool

-- | The <a>FilePath</a> to the configuration file listing OwenDev role
--   IDs.
devIDs :: FilePath

-- | The <a>FilePath</a> representing the location of the assets. TODO:
--   Move to configDir
assetDir :: FilePath

-- | The <a>(=~=)</a> function matches a given <tt>Text</tt> again a regex.
--   Case-less in terms of owoifying.
(=~=) :: Text -> Text -> Bool

-- | <tt>getTimestampFromMessages</tt> returns the given message's
--   timestamp as <tt>Text</tt>, in the format `yyyy-mm-dd | hh:mm:ss`.
getTimestampFromMessage :: Message -> Text

-- | <a>captureCommandOutput</a> creates a new process from the desired
--   command provided as a <a>String</a>. Then, it waits for the command to
--   finish executing, returning its output as a <tt>Text</tt>.
captureCommandOutput :: String -> IO Text

-- | <a>update</a> calls a shell script that updates the bot's repo
update :: IO Bool
snowflakeToInt :: Snowflake -> Integer
moveChannel :: GuildId -> ChannelId -> Int -> DiscordHandler ()

-- | <a>isEmojiValid</a> determines whether an emoji (provided in Discord
--   <a>::0-9</a> format) exists in the guild (or is a default emoji). Case
--   insensitive.
isEmojiValid :: Text -> GuildId -> DiscordHandler Bool

-- | <a>isRoleInGuild</a> determines whether a role containing the given
--   text exists in the guild (case insensitive). If it does, then it
--   returns the role's ID. Otherwise, <a>Nothing</a> is returned.
isRoleInGuild :: Text -> GuildId -> DiscordHandler (Maybe RoleId)

module RoleSelfAssign
reactionAddReceivers :: [ReactionInfo -> DiscordHandler ()]
reactionRemReceivers :: [ReactionInfo -> DiscordHandler ()]
receivers :: [Message -> DiscordHandler ()]

module QuoteSystem
receivers :: [Message -> DiscordHandler ()]

module ModifyEventsChannel
receivers :: [Message -> DiscordHandler ()]

module Misc
commandReceivers :: [Message -> DiscordHandler ()]
miscReceivers :: [Message -> DiscordHandler ()]
reactionReceivers :: [ReactionInfo -> DiscordHandler ()]

module MCServer
receivers :: [Message -> DiscordHandler ()]
instance GHC.Generics.Generic MCServer.ServerStatus
instance GHC.Show.Show MCServer.ServerStatus
instance GHC.Generics.Generic MCServer.ServerPlayers
instance GHC.Show.Show MCServer.ServerPlayers
instance GHC.Generics.Generic MCServer.ServerMOTD
instance GHC.Show.Show MCServer.ServerMOTD
instance Data.Aeson.Types.FromJSON.FromJSON MCServer.ServerStatus
instance Data.Aeson.Types.ToJSON.ToJSON MCServer.ServerStatus
instance Data.Aeson.Types.FromJSON.FromJSON MCServer.ServerPlayers
instance Data.Aeson.Types.ToJSON.ToJSON MCServer.ServerPlayers
instance Data.Aeson.Types.FromJSON.FromJSON MCServer.ServerMOTD
instance Data.Aeson.Types.ToJSON.ToJSON MCServer.ServerMOTD

module Inf1A
receivers :: [Message -> DiscordHandler ()]

module ILA
receivers :: [Message -> DiscordHandler ()]

module Helpme
receivers :: [Message -> DiscordHandler ()]

module HallOfFame
reactionReceivers :: [ReactionInfo -> DiscordHandler ()]
messageReceivers :: [Message -> DiscordHandler ()]

module Calc
receivers :: [Message -> DiscordHandler ()]

module BinancePriceFetcher
fetchADADetails :: IO (Either String String)
fetchTicker :: String -> String -> IO (Either String String)
receivers :: [Message -> DiscordHandler ()]
instance GHC.Generics.Generic BinancePriceFetcher.Ticker
instance GHC.Show.Show BinancePriceFetcher.Ticker
instance Data.Aeson.Types.FromJSON.FromJSON BinancePriceFetcher.Ticker
instance Data.Aeson.Types.ToJSON.ToJSON BinancePriceFetcher.Ticker

module AprilFools
messageReceivers :: [Message -> DiscordHandler ()]
reactionReceivers :: [ReactionInfo -> DiscordHandler ()]

module Admin
receivers :: [Message -> DiscordHandler ()]
sendGitInfoChan :: ChannelId -> DiscordHandler ()
instance GHC.Classes.Eq Admin.Lock
instance GHC.Show.Show Admin.Lock

module EventHandler
handleEvent :: Event -> DiscordHandler ()
